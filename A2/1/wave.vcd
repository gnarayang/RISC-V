$date
	Thu Oct 25 19:32:04 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module one_bit_alu_tb $end
$var wire 1 ! zf $end
$var wire 1 " result $end
$var wire 1 # carry_out $end
$var reg 1 $ a $end
$var reg 1 % a_invert $end
$var reg 1 & b $end
$var reg 1 ' b_invert $end
$var reg 1 ( carry_in $end
$var reg 2 ) operation [1:0] $end
$scope module DUT $end
$var wire 1 $ a $end
$var wire 1 % a_invert $end
$var wire 1 & b $end
$var wire 1 ' b_invert $end
$var wire 1 ( carry_in $end
$var wire 2 * operation [1:0] $end
$var reg 1 + a_out $end
$var reg 1 , and_ $end
$var reg 1 - b_out $end
$var reg 1 # carry_out $end
$var reg 1 . or_ $end
$var reg 1 " result $end
$var reg 1 / sum $end
$var reg 1 ! zf $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0/
0.
0-
0,
0+
b0 *
b0 )
0(
0'
0&
0%
0$
0#
0"
1!
$end
#10
1.
1/
1+
1$
#20
1-
0+
1&
0$
#30
0!
1#
1"
1,
0/
1+
1$
#40
1!
0#
0"
0.
0,
0-
0+
b1 )
b1 *
0&
0$
#50
0!
1"
1.
1/
1+
1$
#60
1-
0+
1&
0$
#70
1#
1,
0/
1+
1$
#80
1!
0#
0"
0.
0,
0-
0+
b10 )
b10 *
0&
0$
#90
0!
1"
1.
1/
1+
1$
#100
1-
0+
1&
0$
#110
1!
1#
0"
1,
0/
1+
1$
#120
